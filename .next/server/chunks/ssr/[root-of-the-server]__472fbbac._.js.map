{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_27a51471.module.css [app-rsc] (css module)"],"sourcesContent":["__turbopack_context__.v({\n  \"className\": \"geist_27a51471-module__xjItyW__className\",\n});\n"],"names":[],"mappings":"AAAA;AACA;AACA","ignoreList":[0]}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":["turbopack:///[next]/internal/font/google/geist_27a51471.js"],"sourcesContent":["import cssModule from \"@vercel/turbopack-next/internal/font/google/cssmodule.module.css?{%22path%22:%22layout.tsx%22,%22import%22:%22Geist%22,%22arguments%22:[{%22subsets%22:[%22latin%22]}],%22variableName%22:%22geist%22}\";\nconst fontData = {\n    className: cssModule.className,\n    style: {\n        fontFamily: \"'Geist', 'Geist Fallback'\",\n        fontStyle: \"normal\",\n\n    },\n};\n\nif (cssModule.variable != null) {\n    fontData.variable = cssModule.variable;\n}\n\nexport default fontData;\n"],"names":[],"mappings":";;;AAAA;;AACA,MAAM,WAAW;IACb,WAAW,qJAAA,CAAA,UAAS,CAAC,SAAS;IAC9B,OAAO;QACH,YAAY;QACZ,WAAW;IAEf;AACJ;AAEA,IAAI,qJAAA,CAAA,UAAS,CAAC,QAAQ,IAAI,MAAM;IAC5B,SAAS,QAAQ,GAAG,qJAAA,CAAA,UAAS,CAAC,QAAQ;AAC1C;uCAEe","ignoreList":[0],"debugId":null}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/app/providers.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Providers = registerClientReference(\n    function() { throw new Error(\"Attempted to call Providers() from the server but Providers is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/providers.tsx <module evaluation>\",\n    \"Providers\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,uDACA","debugId":null}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/app/providers.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const Providers = registerClientReference(\n    function() { throw new Error(\"Attempted to call Providers() from the server but Providers is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/providers.tsx\",\n    \"Providers\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,YAAY,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EAC3C;IAAa,MAAM,IAAI,MAAM;AAAkO,GAC/P,mCACA","debugId":null}},
    {"offset": {"line": 65, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/modules/toast/slice.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface ToastState {\n  message: string;\n  type: 'success' | 'error' | 'info' | 'warning';\n  isVisible: boolean;\n}\n\nconst initialState: ToastState = {\n  message: '',\n  type: 'info',\n  isVisible: false,\n};\n\nconst slice = createSlice({\n  name: 'toast',\n  initialState,\n  reducers: {\n    showToast: (state, action: PayloadAction<{ message: string; type: ToastState['type'] }>) => {\n      state.message = action.payload.message;\n      state.type = action.payload.type;\n      state.isVisible = true;\n    },\n    hideToast: (state) => {\n      state.isVisible = false;\n    },\n  },\n});\n\nexport const { showToast, hideToast } = slice.actions;\n\nexport default slice.reducer;\n"],"names":[],"mappings":"AAAA,qDAAqD;;;;;AACrD;;AAQA,MAAM,eAA2B;IAC/B,SAAS;IACT,MAAM;IACN,WAAW;AACb;AAEA,MAAM,QAAQ,CAAA,GAAA,2LAAA,CAAA,cAAW,AAAD,EAAE;IACxB,MAAM;IACN;IACA,UAAU;QACR,WAAW,CAAC,OAAO;YACjB,MAAM,OAAO,GAAG,OAAO,OAAO,CAAC,OAAO;YACtC,MAAM,IAAI,GAAG,OAAO,OAAO,CAAC,IAAI;YAChC,MAAM,SAAS,GAAG;QACpB;QACA,WAAW,CAAC;YACV,MAAM,SAAS,GAAG;QACpB;IACF;AACF;AAEO,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,MAAM,OAAO;uCAEtC,MAAM,OAAO","debugId":null}},
    {"offset": {"line": 109, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/components/toast.tsx"],"sourcesContent":["import { useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { hideToast } from '@/modules/toast/slice';\nimport { RootState } from '@/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Toast = () => {\n  const dispatch = useDispatch();\n  const { message, type, isVisible } = useSelector((state: RootState) => state.toast);\n\n  useEffect(() => {\n    if (isVisible) {\n      const toastId = (() => {\n        switch (type) {\n          case 'success':\n            return toast.success(message);\n          case 'error':\n            return toast.error(message);\n          case 'info':\n            return toast.info(message);\n          case 'warning':\n            return toast.warning(message);\n          default:\n            return toast(message);\n        }\n      })();\n\n      const timer = setTimeout(() => {\n        toast.dismiss(toastId);\n        dispatch(hideToast());\n      }, 15000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isVisible, message, type, dispatch]);\n\n  return null;\n};\n\nexport default Toast;\n"],"names":[],"mappings":";;;AAAA;AACA;AAEA;AAEA;;;;;;AAGA,MAAM,QAAQ;IACZ,MAAM,WAAW,CAAA,GAAA,8IAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,8IAAA,CAAA,cAAW,AAAD,EAAE,CAAC,QAAqB,MAAM,KAAK;IAElF,CAAA,GAAA,qMAAA,CAAA,YAAS,AAAD,EAAE;QACR,IAAI,WAAW;YACb,MAAM,UAAU,CAAC;gBACf,OAAQ;oBACN,KAAK;wBACH,OAAO,mJAAA,CAAA,QAAK,CAAC,OAAO,CAAC;oBACvB,KAAK;wBACH,OAAO,mJAAA,CAAA,QAAK,CAAC,KAAK,CAAC;oBACrB,KAAK;wBACH,OAAO,mJAAA,CAAA,QAAK,CAAC,IAAI,CAAC;oBACpB,KAAK;wBACH,OAAO,mJAAA,CAAA,QAAK,CAAC,OAAO,CAAC;oBACvB;wBACE,OAAO,CAAA,GAAA,mJAAA,CAAA,QAAK,AAAD,EAAE;gBACjB;YACF,CAAC;YAED,MAAM,QAAQ,WAAW;gBACvB,mJAAA,CAAA,QAAK,CAAC,OAAO,CAAC;gBACd,SAAS,CAAA,GAAA,gIAAA,CAAA,YAAS,AAAD;YACnB,GAAG;YAEH,OAAO,IAAM,aAAa;QAC5B;IACF,GAAG;QAAC;QAAW;QAAS;QAAM;KAAS;IAEvC,OAAO;AACT;uCAEe","debugId":null}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/app/layout.tsx"],"sourcesContent":["// app/layout.tsx\nimport type { Metadata } from 'next';\nimport { Geist } from 'next/font/google';\nimport { Providers } from './providers';\n\nimport './globals.css';\nimport Toast from '@/components/toast';\n\nconst geist = Geist({ subsets: ['latin'] });\n\nexport const metadata: Metadata = {\n  title: 'Luma App',\n  description: 'Aplicação Luma com Next.js',\n};\n\nexport default function RootLayout({ children }: { children: React.ReactNode }) {\n  return (\n    <html lang=\"pt-BR\">\n      <body className={`h-screen relative ${geist.className} antialiased`} >\n        <Providers>\n          {children}\n          <Toast />\n        </Providers>\n      </body>\n    </html>\n  );\n}\n"],"names":[],"mappings":"AAAA,iBAAiB;;;;;;;AAGjB;AAGA;;;;;;AAIO,MAAM,WAAqB;IAChC,OAAO;IACP,aAAa;AACf;AAEe,SAAS,WAAW,EAAE,QAAQ,EAAiC;IAC5E,qBACE,8OAAC;QAAK,MAAK;kBACT,cAAA,8OAAC;YAAK,WAAW,CAAC,kBAAkB,EAAE,yIAAA,CAAA,UAAK,CAAC,SAAS,CAAC,YAAY,CAAC;sBACjE,cAAA,8OAAC,wHAAA,CAAA,YAAS;;oBACP;kCACD,8OAAC,2HAAA,CAAA,UAAK;;;;;;;;;;;;;;;;;;;;;AAKhB","debugId":null}}]
}