{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/themes/darkTheme.ts"],"sourcesContent":["import { Theme } from './types';\n\nexport const darkTheme: Theme = {\n  colors: {\n    background: 'bg-[#121212]',            // fundo geral\n    foreground: 'text-[#F3F4F6]',          // texto padrão\n    primary: 'bg-[#2563EB]',               // cor primária\n    primaryForeground: 'text-[#FFFFFF]',   // texto sobre primária\n    secondary: 'bg-[#374151]',             // cor secundária\n    secondaryForeground: 'text-[#E5E7EB]', // texto sobre secundária\n    backgroundPrimary: 'bg-[#1E1E1E]',      // topo, cards principais\n    backgroundSecondary: 'bg-[#252525]',    // área de mensagens\n    backgroundAccent: 'bg-[#2C2C2C]',       // input/chat\n    backgroundError: 'bg-[#EF4444]',        // vermelho erro\n    backgroundSuccess: 'bg-[#22C55E]',      // verde sucesso\n    backgroundWarning: 'bg-[#F59E0B]',      // laranja aviso\n    backgroundInfo: 'bg-[#3B82F6]',          // azul informação\n\n    text: 'text-[#F3F4F6]',                 // texto padrão\n    textPrimary: 'text-[#E5E7EB]',           // texto principal\n    textSecondary: 'text-[#9CA3AF]',         // texto secundário\n    textAccent: 'text-[#60A5FA]',            // destaques (links, botões)\n    textError: 'text-[#F87171]',             // texto de erro\n    textSuccess: 'text-[#34D399]',           // texto de sucesso\n    textWarning: 'text-[#FBBF24]',           // texto de aviso\n    textInfo: 'text-[#60A5FA]',              // texto de informação\n  },\n\n  typography: typography,\n\n  spacing: {\n    small: 'p-2',\n    medium: 'p-4',\n    large: 'p-6',\n    xlarge: 'p-8',\n  },\n\n  borderRadius: {\n    small: 'rounded',\n    medium: 'rounded-md',\n    large: 'rounded-lg',\n  },\n\n  shadows: {\n    small: 'shadow-[0_1px_2px_0_rgba(0,0,0,0.05)]',\n    medium: 'shadow-[0_2px_4px_rgba(0,0,0,0.08)]',\n    large: 'shadow-[0_4px_6px_rgba(0,0,0,0.1)]',\n  },\n\n  transitions: {\n    fast: 'transition-all duration-150',\n    medium: 'transition-all duration-300',\n    slow: 'transition-all duration-500',\n  },\n\n  borders: {\n    default: 'border border-[#374151]',       // borda padrão\n    focus: 'border border-[#60A5FA]',          // borda em foco (inputs, botões)\n    error: 'border border-[#EF4444]',          // borda em erro\n  },\n\n  buttons: {\n    primary: 'bg-[#2563EB] text-[#FFFFFF] hover:bg-[#1D4ED8]',         // botão primário\n    secondary: 'bg-[#374151] text-[#E5E7EB] hover:bg-[#4B5563]',       // botão secundário\n    danger: 'bg-[#EF4444] text-[#FFFFFF] hover:bg-[#DC2626]',          // botão de erro\n  },\n\n  icons: {\n    primary: 'text-[#9CA3AF]',         // cor de ícones padrão\n    accent: 'text-[#60A5FA]',           // cor de ícones destacados\n  },\n\n  animations: {\n    pulse: 'animate-pulse',             // animação de pulsar\n    bounce: 'animate-bounce',           // animação de pular\n  },\n};\n"],"names":[],"mappings":";;;AAEO,MAAM,YAAmB;IAC9B,QAAQ;QACN,YAAY;QACZ,YAAY;QACZ,SAAS;QACT,mBAAmB;QACnB,WAAW;QACX,qBAAqB;QACrB,mBAAmB;QACnB,qBAAqB;QACrB,kBAAkB;QAClB,iBAAiB;QACjB,mBAAmB;QACnB,mBAAmB;QACnB,gBAAgB;QAEhB,MAAM;QACN,aAAa;QACb,eAAe;QACf,YAAY;QACZ,WAAW;QACX,aAAa;QACb,aAAa;QACb,UAAU;IACZ;IAEA,YAAY;IAEZ,SAAS;QACP,OAAO;QACP,QAAQ;QACR,OAAO;QACP,QAAQ;IACV;IAEA,cAAc;QACZ,OAAO;QACP,QAAQ;QACR,OAAO;IACT;IAEA,SAAS;QACP,OAAO;QACP,QAAQ;QACR,OAAO;IACT;IAEA,aAAa;QACX,MAAM;QACN,QAAQ;QACR,MAAM;IACR;IAEA,SAAS;QACP,SAAS;QACT,OAAO;QACP,OAAO;IACT;IAEA,SAAS;QACP,SAAS;QACT,WAAW;QACX,QAAQ;IACV;IAEA,OAAO;QACL,SAAS;QACT,QAAQ;IACV;IAEA,YAAY;QACV,OAAO;QACP,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 84, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/themes/lightTheme.ts"],"sourcesContent":["import { Theme } from './types';\n\nexport const lightTheme: Theme = {\n  colors: {\n    background: 'bg-[#FFFFFF]',            // fundo geral\n    foreground: 'text-[#181A1B]',          // texto padrão\n    primary: 'bg-[#2563EB]',               // cor primária\n    primaryForeground: 'text-[#FFFFFF]',   // texto sobre primária\n    secondary: 'bg-[#E5E7EB]',             // cor secundária\n    secondaryForeground: 'text-[#23272A]', // texto sobre secundária\n    backgroundPrimary: 'bg-[#F3F4F6]',      // topo, cards principais (cinza muito claro)\n    backgroundSecondary: 'bg-[#E5E7EB]',    // área de mensagens (cinza claro)\n    backgroundAccent: 'bg-[#F9FAFB]',       // input/chat (quase branco)\n    backgroundError: 'bg-[#EF4444]',        // vermelho erro\n    backgroundSuccess: 'bg-[#22C55E]',      // verde sucesso\n    backgroundWarning: 'bg-[#F59E0B]',      // laranja aviso\n    backgroundInfo: 'bg-[#3B82F6]',         // azul informação\n\n    text: 'text-[#181A1B]',                 // texto preto suave\n    textPrimary: 'text-[#23272A]',           // texto principal (preto mais intenso)\n    textSecondary: 'text-[#6B7280]',          // texto secundário (cinza)\n    textAccent: 'text-[#2563EB]',            // destaque (links, botões)\n    textError: 'text-[#B91C1C]',             // texto erro (vermelho forte)\n    textSuccess: 'text-[#15803D]',           // texto sucesso\n    textWarning: 'text-[#B45309]',           // texto aviso\n    textInfo: 'text-[#1D4ED8]',              // texto informação\n  },\n\n  typography: {\n    fontFamily: 'font-sans',                 // fonte moderna\n    fontSize: {\n      small: 'text-[12px]',\n      medium: 'text-[17px]',                 // ajuste fino\n      large: 'text-[20px]',\n      xlarge: 'text-[24px]',\n    },\n    fontWeight: {\n      light: 'font-light',\n      regular: 'font-normal',\n      medium: 'font-medium',\n      bold: 'font-bold',\n    },\n    lineHeight: {\n      small: 'leading-snug',\n      medium: 'leading-normal',\n      large: 'leading-relaxed',\n    },\n  },\n\n  spacing: {\n    small: 'p-2',\n    medium: 'p-4',\n    large: 'p-6',\n    xlarge: 'p-8',\n  },\n\n  borderRadius: {\n    small: 'rounded',\n    medium: 'rounded-md',\n    large: 'rounded-lg',\n  },\n\n  shadows: {\n    small: 'shadow-[0_1px_2px_0_rgba(0,0,0,0.05)]',\n    medium: 'shadow-[0_2px_4px_rgba(0,0,0,0.08)]',\n    large: 'shadow-[0_4px_6px_rgba(0,0,0,0.1)]',\n  },\n\n  transitions: {\n    fast: 'transition-all duration-150',\n    medium: 'transition-all duration-300',\n    slow: 'transition-all duration-500',\n  },\n\n  borders: {\n    default: 'border border-[#D1D5DB]',       // borda padrão cinza clara\n    focus: 'border border-[#2563EB]',          // borda em foco azul\n    error: 'border border-[#EF4444]',          // borda em erro\n  },\n\n  buttons: {\n    primary: 'bg-[#2563EB] text-[#FFFFFF] hover:bg-[#1D4ED8]',         // botão primário azul\n    secondary: 'bg-[#E5E7EB] text-[#23272A] hover:bg-[#D1D5DB]',       // botão secundário cinza claro\n    danger: 'bg-[#EF4444] text-[#FFFFFF] hover:bg-[#DC2626]',          // botão de erro vermelho\n  },\n\n  icons: {\n    primary: 'text-[#6B7280]',         // ícones cinza padrão\n    accent: 'text-[#2563EB]',           // ícones destaque azul\n  },\n\n  animations: {\n    pulse: 'animate-pulse',\n    bounce: 'animate-bounce',\n  },\n};\n"],"names":[],"mappings":";;;AAEO,MAAM,aAAoB;IAC/B,QAAQ;QACN,YAAY;QACZ,YAAY;QACZ,SAAS;QACT,mBAAmB;QACnB,WAAW;QACX,qBAAqB;QACrB,mBAAmB;QACnB,qBAAqB;QACrB,kBAAkB;QAClB,iBAAiB;QACjB,mBAAmB;QACnB,mBAAmB;QACnB,gBAAgB;QAEhB,MAAM;QACN,aAAa;QACb,eAAe;QACf,YAAY;QACZ,WAAW;QACX,aAAa;QACb,aAAa;QACb,UAAU;IACZ;IAEA,YAAY;QACV,YAAY;QACZ,UAAU;YACR,OAAO;YACP,QAAQ;YACR,OAAO;YACP,QAAQ;QACV;QACA,YAAY;YACV,OAAO;YACP,SAAS;YACT,QAAQ;YACR,MAAM;QACR;QACA,YAAY;YACV,OAAO;YACP,QAAQ;YACR,OAAO;QACT;IACF;IAEA,SAAS;QACP,OAAO;QACP,QAAQ;QACR,OAAO;QACP,QAAQ;IACV;IAEA,cAAc;QACZ,OAAO;QACP,QAAQ;QACR,OAAO;IACT;IAEA,SAAS;QACP,OAAO;QACP,QAAQ;QACR,OAAO;IACT;IAEA,aAAa;QACX,MAAM;QACN,QAAQ;QACR,MAAM;IACR;IAEA,SAAS;QACP,SAAS;QACT,OAAO;QACP,OAAO;IACT;IAEA,SAAS;QACP,SAAS;QACT,WAAW;QACX,QAAQ;IACV;IAEA,OAAO;QACL,SAAS;QACT,QAAQ;IACV;IAEA,YAAY;QACV,OAAO;QACP,QAAQ;IACV;AACF","debugId":null}},
    {"offset": {"line": 180, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/themes/themeContext.tsx"],"sourcesContent":["'use client';\n\nimport { createContext, useContext, useEffect, useState } from 'react';\nimport { darkTheme } from './darkTheme';\nimport { lightTheme } from './lightTheme';\nimport { ThemeContextType, ThemeMode, ThemeProviderProps } from './types';\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  const [theme, setTheme] = useState<ThemeMode>('dark');\n\n  useEffect(() => {\n    const savedTheme = localStorage.getItem('theme') as ThemeMode;\n    if (savedTheme) {\n      setTheme(savedTheme);\n      document.documentElement.classList.toggle('dark', savedTheme === 'dark');\n    }\n  }, []);\n\n  const toggleTheme = () => {\n    const newTheme = theme === 'light' ? 'dark' : 'light';\n    setTheme(newTheme);\n    localStorage.setItem('theme', newTheme);\n    document.documentElement.classList.toggle('dark');\n  };\n\n  const themeSelected = theme === 'light' ? lightTheme : darkTheme;\n\n  return (\n    <ThemeContext.Provider value={{ theme, themeSelected, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n} "],"names":[],"mappings":";;;;;AAEA;AACA;AACA;;;AAJA;;;;AAOA,MAAM,6BAAe,CAAA,GAAA,6JAAA,CAAA,gBAAa,AAAD,EAAgC;AAE1D,SAAS,cAAc,EAAE,QAAQ,EAAsB;;IAC5D,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAa;IAE9C,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;mCAAE;YACR,MAAM,aAAa,aAAa,OAAO,CAAC;YACxC,IAAI,YAAY;gBACd,SAAS;gBACT,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC,QAAQ,eAAe;YACnE;QACF;kCAAG,EAAE;IAEL,MAAM,cAAc;QAClB,MAAM,WAAW,UAAU,UAAU,SAAS;QAC9C,SAAS;QACT,aAAa,OAAO,CAAC,SAAS;QAC9B,SAAS,eAAe,CAAC,SAAS,CAAC,MAAM,CAAC;IAC5C;IAEA,MAAM,gBAAgB,UAAU,UAAU,8HAAA,CAAA,aAAU,GAAG,6HAAA,CAAA,YAAS;IAEhE,qBACE,6LAAC,aAAa,QAAQ;QAAC,OAAO;YAAE;YAAO;YAAe;QAAY;kBAC/D;;;;;;AAGP;GAzBgB;KAAA;AA2BT,SAAS;;IACd,MAAM,UAAU,CAAA,GAAA,6JAAA,CAAA,aAAU,AAAD,EAAE;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB","debugId":null}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/modules/chatSelected/slice.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// src/store/modules/session/slice.ts\nimport { CoreMessageResponse } from '@/interface/chats';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface SessionState {\n  valid: boolean;\n  loading: boolean;\n  chatId: string | null;\n  messages: CoreMessageResponse[];\n}\n\nconst initialState: SessionState = {\n  valid: false,\n  loading: false,\n  chatId: null,\n  messages: [],\n};\n\nconst slice = createSlice({\n  name: 'chatSelected',\n  initialState,\n  reducers: {\n    chatSelectedSet: (state, action: PayloadAction<{ chatId: string }>) => {\n      state.loading = true;\n      state.chatId = action.payload.chatId;\n    },\n    chatSelectedMessage: (state, action: PayloadAction<{ message: CoreMessageResponse }>) => {\n      state.messages = [];\n      state.messages.push(action.payload.message);\n    },\n    chatSelectedMessageAdd: (state, action: PayloadAction<{ message: CoreMessageResponse }>) => {\n      const newMessages = [...state.messages || []];\n      newMessages.push(action.payload.message);\n      state.messages = newMessages;\n    },\n    chatSelectedMessageClear: (state) => {\n      state.messages = [];\n    },\n  },\n});\n\nexport const {\n  chatSelectedSet,\n  chatSelectedMessage,\n  chatSelectedMessageAdd,\n  chatSelectedMessageClear,\n} = slice.actions;\n\nexport default slice.reducer;\n"],"names":[],"mappings":"AAAA,qDAAqD,GAErD,qCAAqC;;;;;;;;AAErC;;AASA,MAAM,eAA6B;IACjC,OAAO;IACP,SAAS;IACT,QAAQ;IACR,UAAU,EAAE;AACd;AAEA,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,cAAW,AAAD,EAAE;IACxB,MAAM;IACN;IACA,UAAU;QACR,iBAAiB,CAAC,OAAO;YACvB,MAAM,OAAO,GAAG;YAChB,MAAM,MAAM,GAAG,OAAO,OAAO,CAAC,MAAM;QACtC;QACA,qBAAqB,CAAC,OAAO;YAC3B,MAAM,QAAQ,GAAG,EAAE;YACnB,MAAM,QAAQ,CAAC,IAAI,CAAC,OAAO,OAAO,CAAC,OAAO;QAC5C;QACA,wBAAwB,CAAC,OAAO;YAC9B,MAAM,cAAc;mBAAI,MAAM,QAAQ,IAAI,EAAE;aAAC;YAC7C,YAAY,IAAI,CAAC,OAAO,OAAO,CAAC,OAAO;YACvC,MAAM,QAAQ,GAAG;QACnB;QACA,0BAA0B,CAAC;YACzB,MAAM,QAAQ,GAAG,EAAE;QACrB;IACF;AACF;AAEO,MAAM,EACX,eAAe,EACf,mBAAmB,EACnB,sBAAsB,EACtB,wBAAwB,EACzB,GAAG,MAAM,OAAO;uCAEF,MAAM,OAAO","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/modules/profile/slice.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// src/store/modules/session/slice.ts\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface SessionState {\n  valid: boolean;\n  loading: boolean;\n  chatId: string | null;\n  name: string | null;\n}\n\nconst initialState: SessionState = {\n  valid: false,\n  loading: false,\n  chatId: null,\n  name: null,\n};\n\nconst sessionSlice = createSlice({\n  name: 'profile',\n  initialState,\n  reducers: {\n    profileRequest: (state, action: PayloadAction<{ token: string }>) => {\n      state.loading = true;\n    },\n    profileSuccess: (state, action: PayloadAction<any>) => {\n      state.loading = false;\n      state.valid = true;\n      state.chatId = action.payload.chatId; \n      state.name = action.payload.name;\n    },\n    profileFailure: (state) => {\n      state.loading = false;\n      state.valid = false;\n    },\n  },\n});\n\nexport const {\n  profileRequest,\n  profileSuccess,\n  profileFailure,\n} = sessionSlice.actions;\n\nexport default sessionSlice.reducer;\n"],"names":[],"mappings":"AAAA,qDAAqD,GAErD,qCAAqC;;;;;;;AACrC;;AASA,MAAM,eAA6B;IACjC,OAAO;IACP,SAAS;IACT,QAAQ;IACR,MAAM;AACR;AAEA,MAAM,eAAe,CAAA,GAAA,8LAAA,CAAA,cAAW,AAAD,EAAE;IAC/B,MAAM;IACN;IACA,UAAU;QACR,gBAAgB,CAAC,OAAO;YACtB,MAAM,OAAO,GAAG;QAClB;QACA,gBAAgB,CAAC,OAAO;YACtB,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;YACd,MAAM,MAAM,GAAG,OAAO,OAAO,CAAC,MAAM;YACpC,MAAM,IAAI,GAAG,OAAO,OAAO,CAAC,IAAI;QAClC;QACA,gBAAgB,CAAC;YACf,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;QAChB;IACF;AACF;AAEO,MAAM,EACX,cAAc,EACd,cAAc,EACd,cAAc,EACf,GAAG,aAAa,OAAO;uCAET,aAAa,OAAO","debugId":null}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/modules/sendMessage/slice.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// src/store/modules/session/slice.ts\nimport { CoreMessageResponse } from '@/interface/chats';\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface SessionState {\n  valid: boolean;\n  loading: boolean;\n  response: CoreMessageResponse | null;\n}\n\nconst initialState: SessionState = {\n  valid: false,\n  loading: false,\n  response: null,\n};\n\nconst slice = createSlice({\n  name: 'sendMessage',\n  initialState,\n  reducers: {\n    sendMessageRequest: (state, action: PayloadAction<{ chatId: string, message: string }>) => {\n      state.loading = true;\n    },\n    sendMessageSuccess: (state, action: PayloadAction<any>) => {\n      state.loading = false;\n      state.valid = true;\n      state.response = action.payload.response;\n    },\n    sendMessageFailure: (state) => {\n      state.loading = false;\n      state.valid = false;\n    },\n  },\n});\n\nexport const {\n  sendMessageRequest,\n  sendMessageSuccess,\n  sendMessageFailure,\n} = slice.actions;\n\nexport default slice.reducer;\n"],"names":[],"mappings":"AAAA,qDAAqD,GAErD,qCAAqC;;;;;;;AAErC;;AAQA,MAAM,eAA6B;IACjC,OAAO;IACP,SAAS;IACT,UAAU;AACZ;AAEA,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,cAAW,AAAD,EAAE;IACxB,MAAM;IACN;IACA,UAAU;QACR,oBAAoB,CAAC,OAAO;YAC1B,MAAM,OAAO,GAAG;QAClB;QACA,oBAAoB,CAAC,OAAO;YAC1B,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;YACd,MAAM,QAAQ,GAAG,OAAO,OAAO,CAAC,QAAQ;QAC1C;QACA,oBAAoB,CAAC;YACnB,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;QAChB;IACF;AACF;AAEO,MAAM,EACX,kBAAkB,EAClB,kBAAkB,EAClB,kBAAkB,EACnB,GAAG,MAAM,OAAO;uCAEF,MAAM,OAAO","debugId":null}},
    {"offset": {"line": 388, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/modules/session/slice.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// src/store/modules/session/slice.ts\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface SessionState {\n  valid: boolean;\n  loading: boolean;\n  userId: string | null;\n  token: string | null;\n  chatId: string | null;\n}\n\nconst initialState: SessionState = {\n  valid: false,\n  loading: false,\n  userId: null,\n  token: null,\n  chatId: null,\n};\n\nconst slice = createSlice({\n  name: 'session',\n  initialState,\n  reducers: {\n    validateSessionRequest: (state) => {\n      state.loading = true;\n    },\n    validateSessionSuccess: (state, action: PayloadAction<any>) => {\n      state.loading = false;\n      state.valid = true;\n      \n      if (action.payload.userId) {\n        state.userId = action.payload.userId;\n      }\n\n      if (action.payload.token) {\n        state.token = action.payload.token;\n      }\n    },\n    validateSessionFailure: (state) => {\n      state.loading = false;\n      state.valid = false;\n    },\n  },\n});\n\nexport const {\n  validateSessionRequest,\n  validateSessionSuccess,\n  validateSessionFailure,\n} = slice.actions;\n\nexport default slice.reducer;\n"],"names":[],"mappings":"AAAA,qDAAqD,GAErD,qCAAqC;;;;;;;AACrC;;AAUA,MAAM,eAA6B;IACjC,OAAO;IACP,SAAS;IACT,QAAQ;IACR,OAAO;IACP,QAAQ;AACV;AAEA,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,cAAW,AAAD,EAAE;IACxB,MAAM;IACN;IACA,UAAU;QACR,wBAAwB,CAAC;YACvB,MAAM,OAAO,GAAG;QAClB;QACA,wBAAwB,CAAC,OAAO;YAC9B,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;YAEd,IAAI,OAAO,OAAO,CAAC,MAAM,EAAE;gBACzB,MAAM,MAAM,GAAG,OAAO,OAAO,CAAC,MAAM;YACtC;YAEA,IAAI,OAAO,OAAO,CAAC,KAAK,EAAE;gBACxB,MAAM,KAAK,GAAG,OAAO,OAAO,CAAC,KAAK;YACpC;QACF;QACA,wBAAwB,CAAC;YACvB,MAAM,OAAO,GAAG;YAChB,MAAM,KAAK,GAAG;QAChB;IACF;AACF;AAEO,MAAM,EACX,sBAAsB,EACtB,sBAAsB,EACtB,sBAAsB,EACvB,GAAG,MAAM,OAAO;uCAEF,MAAM,OAAO","debugId":null}},
    {"offset": {"line": 438, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/modules/toast/slice.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { createSlice, PayloadAction } from '@reduxjs/toolkit';\n\ninterface ToastState {\n  message: string;\n  type: 'success' | 'error' | 'info' | 'warning';\n  isVisible: boolean;\n}\n\nconst initialState: ToastState = {\n  message: '',\n  type: 'info',\n  isVisible: false,\n};\n\nconst slice = createSlice({\n  name: 'toast',\n  initialState,\n  reducers: {\n    showToast: (state, action: PayloadAction<{ message: string; type: ToastState['type'] }>) => {\n      state.message = action.payload.message;\n      state.type = action.payload.type;\n      state.isVisible = true;\n    },\n    hideToast: (state) => {\n      state.isVisible = false;\n    },\n  },\n});\n\nexport const { showToast, hideToast } = slice.actions;\n\nexport default slice.reducer;\n"],"names":[],"mappings":"AAAA,qDAAqD;;;;;AACrD;;AAQA,MAAM,eAA2B;IAC/B,SAAS;IACT,MAAM;IACN,WAAW;AACb;AAEA,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,cAAW,AAAD,EAAE;IACxB,MAAM;IACN;IACA,UAAU;QACR,WAAW,CAAC,OAAO;YACjB,MAAM,OAAO,GAAG,OAAO,OAAO,CAAC,OAAO;YACtC,MAAM,IAAI,GAAG,OAAO,OAAO,CAAC,IAAI;YAChC,MAAM,SAAS,GAAG;QACpB;QACA,WAAW,CAAC;YACV,MAAM,SAAS,GAAG;QACpB;IACF;AACF;AAEO,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,MAAM,OAAO;uCAEtC,MAAM,OAAO","debugId":null}},
    {"offset": {"line": 475, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/store/rootReducer.ts"],"sourcesContent":["// src/store/rootReducer.ts\nimport { combineReducers } from '@reduxjs/toolkit';\n\nimport chatSelectedReducer from '@/modules/chatSelected/slice';\nimport profileReducer from '@/modules/profile/slice';\nimport sendMessageReducer from '@/modules/sendMessage/slice';\nimport sessionReducer from '@/modules/session/slice';\nimport toastReducer from '@/modules/toast/slice';\n\nexport const rootReducer = combineReducers({\n  session: sessionReducer,\n  profile: profileReducer,\n  sendMessage: sendMessageReducer,\n  chatSelected: chatSelectedReducer,\n  toast: toastReducer,\n});\n"],"names":[],"mappings":"AAAA,2BAA2B;;;;AAC3B;AAEA;AACA;AACA;AACA;AACA;;;;;;;AAEO,MAAM,cAAc,CAAA,GAAA,0IAAA,CAAA,kBAAe,AAAD,EAAE;IACzC,SAAS,qIAAA,CAAA,UAAc;IACvB,SAAS,qIAAA,CAAA,UAAc;IACvB,aAAa,yIAAA,CAAA,UAAkB;IAC/B,cAAc,0IAAA,CAAA,UAAmB;IACjC,OAAO,mIAAA,CAAA,UAAY;AACrB","debugId":null}},
    {"offset": {"line": 507, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/services/httpClient.ts"],"sourcesContent":["// src/services/HttpClient.ts\n'use client';\n\ntype HttpMethod = 'GET' | 'POST' | 'PUT' | 'DELETE' | 'PATCH';\n\ninterface HttpOptions {\n  headers?: Record<string, string>;\n  cache?: RequestCache;\n}\n\nexport class HttpClient {\n  \n  private baseUrl: string;\n  private defaultHeaders: Record<string, string>;\n\n  constructor(baseURL: string, defaultOptions: HttpOptions = {}) {\n    this.baseUrl = baseURL;\n    this.defaultHeaders = {\n      'Content-Type': 'application/json',\n      'Accept': 'application/json',\n      ...(defaultOptions.headers ? defaultOptions.headers : {})\n    };\n  }\n\n  setToken(token: string) {\n    this.defaultHeaders = {\n      ...this.defaultHeaders,\n      ...(token ? { 'Authorization': `Bearer ${token}` } : {})\n    }\n  }\n\n  private async request<T = any>(\n    method: HttpMethod,\n    url: string,\n    data?: any,\n    options: HttpOptions = {}\n  ): Promise<T> {\n    const fullUrl = `${this.baseUrl}${url}`;\n    const headers = {\n      ...this.defaultHeaders,\n      ...(options.headers ? options.headers : {})\n    };\n\n    const dataRequest = {\n      method,\n      headers,\n      body: data ? JSON.stringify(data) : undefined,\n      cache: options.cache || 'no-store',\n    }\n\n    const response = await fetch(fullUrl, dataRequest);\n    if (!response.ok) {\n      const errorBody = await response.text();\n      console.error(`❌ [${method}] ${url} falhou:`, errorBody);\n      throw new Error(`HTTP ${response.status}: ${errorBody}`);\n    }\n\n    const contentType = response.headers.get('content-type') || '';\n    if (contentType.includes('application/json')) {\n      return response.json() as Promise<T>;\n    }\n\n    // fallback para texto\n    return response.text() as unknown as T;\n  }\n\n  public get<T = any>(url: string, options?: HttpOptions): Promise<T> {\n    return this.request<T>('GET', url, undefined, options);\n  }\n\n  public post<T = any>(url: string, data?: any, options?: HttpOptions): Promise<T> {\n    return this.request<T>('POST', url, data, options);\n  }\n\n  public put<T = any>(url: string, data?: any, options?: HttpOptions): Promise<T> {\n    return this.request<T>('PUT', url, data, options);\n  }\n\n  public patch<T = any>(url: string, data?: any, options?: HttpOptions): Promise<T> {\n    return this.request<T>('PATCH', url, data, options);\n  }\n\n  public delete<T = any>(url: string, options?: HttpOptions): Promise<T> {\n    return this.request<T>('DELETE', url, undefined, options);\n  }\n}\n"],"names":[],"mappings":"AAAA,6BAA6B;;;;AAC7B;AASO,MAAM;IAEH,QAAgB;IAChB,eAAuC;IAE/C,YAAY,OAAe,EAAE,iBAA8B,CAAC,CAAC,CAAE;QAC7D,IAAI,CAAC,OAAO,GAAG;QACf,IAAI,CAAC,cAAc,GAAG;YACpB,gBAAgB;YAChB,UAAU;YACV,GAAI,eAAe,OAAO,GAAG,eAAe,OAAO,GAAG,CAAC,CAAC;QAC1D;IACF;IAEA,SAAS,KAAa,EAAE;QACtB,IAAI,CAAC,cAAc,GAAG;YACpB,GAAG,IAAI,CAAC,cAAc;YACtB,GAAI,QAAQ;gBAAE,iBAAiB,CAAC,OAAO,EAAE,OAAO;YAAC,IAAI,CAAC,CAAC;QACzD;IACF;IAEA,MAAc,QACZ,MAAkB,EAClB,GAAW,EACX,IAAU,EACV,UAAuB,CAAC,CAAC,EACb;QACZ,MAAM,UAAU,GAAG,IAAI,CAAC,OAAO,GAAG,KAAK;QACvC,MAAM,UAAU;YACd,GAAG,IAAI,CAAC,cAAc;YACtB,GAAI,QAAQ,OAAO,GAAG,QAAQ,OAAO,GAAG,CAAC,CAAC;QAC5C;QAEA,MAAM,cAAc;YAClB;YACA;YACA,MAAM,OAAO,KAAK,SAAS,CAAC,QAAQ;YACpC,OAAO,QAAQ,KAAK,IAAI;QAC1B;QAEA,MAAM,WAAW,MAAM,MAAM,SAAS;QACtC,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,YAAY,MAAM,SAAS,IAAI;YACrC,QAAQ,KAAK,CAAC,CAAC,GAAG,EAAE,OAAO,EAAE,EAAE,IAAI,QAAQ,CAAC,EAAE;YAC9C,MAAM,IAAI,MAAM,CAAC,KAAK,EAAE,SAAS,MAAM,CAAC,EAAE,EAAE,WAAW;QACzD;QAEA,MAAM,cAAc,SAAS,OAAO,CAAC,GAAG,CAAC,mBAAmB;QAC5D,IAAI,YAAY,QAAQ,CAAC,qBAAqB;YAC5C,OAAO,SAAS,IAAI;QACtB;QAEA,sBAAsB;QACtB,OAAO,SAAS,IAAI;IACtB;IAEO,IAAa,GAAW,EAAE,OAAqB,EAAc;QAClE,OAAO,IAAI,CAAC,OAAO,CAAI,OAAO,KAAK,WAAW;IAChD;IAEO,KAAc,GAAW,EAAE,IAAU,EAAE,OAAqB,EAAc;QAC/E,OAAO,IAAI,CAAC,OAAO,CAAI,QAAQ,KAAK,MAAM;IAC5C;IAEO,IAAa,GAAW,EAAE,IAAU,EAAE,OAAqB,EAAc;QAC9E,OAAO,IAAI,CAAC,OAAO,CAAI,OAAO,KAAK,MAAM;IAC3C;IAEO,MAAe,GAAW,EAAE,IAAU,EAAE,OAAqB,EAAc;QAChF,OAAO,IAAI,CAAC,OAAO,CAAI,SAAS,KAAK,MAAM;IAC7C;IAEO,OAAgB,GAAW,EAAE,OAAqB,EAAc;QACrE,OAAO,IAAI,CAAC,OAAO,CAAI,UAAU,KAAK,WAAW;IACnD;AACF","debugId":null}},
    {"offset": {"line": 581, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/services/apiSercice.ts"],"sourcesContent":["'use client';\n\nimport { HttpClient } from \"./httpClient\";\n\ntype Json = Record<string, any>;\n\nexport class ApiService {\n  private api: HttpClient;\n\n  constructor(token?: string) {\n    const resolvedBaseUrl = process.env.NEXT_PUBLIC_API_URL || '';\n\n    if (!resolvedBaseUrl.trim()) {\n      throw new Error('❌ NEXT_PUBLIC_API_URL não está definida ou está vazia');\n    }\n\n    this.api = new HttpClient(resolvedBaseUrl, {\n      headers: {\n        ...(token ? { Authorization: `Bearer ${token}` } : {}),\n      },\n    });\n  }\n\n  async setToken(token: string): Promise<void> {\n    this.api.setToken(token);\n  }\n\n  async validateSession(): Promise<Json> {    \n    return this.api.get<Json>('/chat/session');\n  }\n\n  async startSession(userId: string): Promise<Json> {\n    return this.api.post<Json>('/chat/start-session', {}, {\n      headers: { usid: userId },\n    });\n  }\n\n  async getUserProfile(): Promise<Json> {\n    return this.api.get<Json>('/u/p');\n  }\n\n  async listChats(): Promise<Json[]> {\n    const data = await this.api.get<Json>('/chat/list');\n    return Array.isArray(data.chats) ? data.chats : [];\n  }\n\n  async sendMessage(chatId: string, message: string): Promise<Json> {\n    return this.api.post<Json>('/chat/message', { message }, { headers: { chti: chatId } });\n  }\n}\n"],"names":[],"mappings":";;;AAU4B;AAR5B;AAFA;;AAMO,MAAM;IACH,IAAgB;IAExB,YAAY,KAAc,CAAE;QAC1B,MAAM,kBAAkB,6DAAmC;QAE3D,IAAI,CAAC,gBAAgB,IAAI,IAAI;YAC3B,MAAM,IAAI,MAAM;QAClB;QAEA,IAAI,CAAC,GAAG,GAAG,IAAI,gIAAA,CAAA,aAAU,CAAC,iBAAiB;YACzC,SAAS;gBACP,GAAI,QAAQ;oBAAE,eAAe,CAAC,OAAO,EAAE,OAAO;gBAAC,IAAI,CAAC,CAAC;YACvD;QACF;IACF;IAEA,MAAM,SAAS,KAAa,EAAiB;QAC3C,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC;IACpB;IAEA,MAAM,kBAAiC;QACrC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAO;IAC5B;IAEA,MAAM,aAAa,MAAc,EAAiB;QAChD,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAO,uBAAuB,CAAC,GAAG;YACpD,SAAS;gBAAE,MAAM;YAAO;QAC1B;IACF;IAEA,MAAM,iBAAgC;QACpC,OAAO,IAAI,CAAC,GAAG,CAAC,GAAG,CAAO;IAC5B;IAEA,MAAM,YAA6B;QACjC,MAAM,OAAO,MAAM,IAAI,CAAC,GAAG,CAAC,GAAG,CAAO;QACtC,OAAO,MAAM,OAAO,CAAC,KAAK,KAAK,IAAI,KAAK,KAAK,GAAG,EAAE;IACpD;IAEA,MAAM,YAAY,MAAc,EAAE,OAAe,EAAiB;QAChE,OAAO,IAAI,CAAC,GAAG,CAAC,IAAI,CAAO,iBAAiB;YAAE;QAAQ,GAAG;YAAE,SAAS;gBAAE,MAAM;YAAO;QAAE;IACvF;AACF","debugId":null}},
    {"offset": {"line": 642, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/modules/profile/saga.ts"],"sourcesContent":["'use client';\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// src/store/modules/session/saga.ts\nimport { ApiService } from '@/services/apiSercice';\nimport { RootState } from '@/store';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\nimport { chatSelectedSet } from '../chatSelected/slice';\nimport {\n  profileFailure,\n  profileRequest,\n  profileSuccess\n} from './slice';\n\nconst handleprofile = function* ({ payload }: any): any {\n  let token = payload.token;\n  if (!token) {\n    token = yield select((state: RootState) => state.session.token);\n  }\n\n  try {\n    const api = new ApiService(token);\n    const response = yield call([api, api.getUserProfile]);\n    const data = response?.data;\n    \n    yield put(chatSelectedSet({ chatId: data?.chatId }));\n    yield put(profileSuccess({\n      chatId: data?.chatId,\n      name: data?.name,\n      valid: true,\n    }));\n    return;\n  } catch (err: any) {\n    console.error('💥 Erro ao validar sessão:', err);\n    yield put(profileFailure());\n    return;\n  }\n}\n\n\nexport default function* sessionSaga() {\n  yield takeLatest<any>(\n    profileRequest.type,\n    handleprofile\n  );\n}\n"],"names":[],"mappings":";;;AAEA,oDAAoD,GACpD,qDAAqD,GAErD,oCAAoC;AACpC;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAVA;;;;;AAgBA,MAAM,gBAAgB,UAAW,EAAE,OAAO,EAAO;IAC/C,IAAI,QAAQ,QAAQ,KAAK;IACzB,IAAI,CAAC,OAAO;QACV,QAAQ,MAAM,CAAA,GAAA,oMAAA,CAAA,SAAM,AAAD,EAAE,CAAC,QAAqB,MAAM,OAAO,CAAC,KAAK;IAChE;IAEA,IAAI;QACF,MAAM,MAAM,IAAI,gIAAA,CAAA,aAAU,CAAC;QAC3B,MAAM,WAAW,MAAM,CAAA,GAAA,iMAAA,CAAA,OAAI,AAAD,EAAE;YAAC;YAAK,IAAI,cAAc;SAAC;QACrD,MAAM,OAAO,UAAU;QAEvB,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,0IAAA,CAAA,kBAAe,AAAD,EAAE;YAAE,QAAQ,MAAM;QAAO;QACjD,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD,EAAE;YACvB,QAAQ,MAAM;YACd,MAAM,MAAM;YACZ,OAAO;QACT;QACA;IACF,EAAE,OAAO,KAAU;QACjB,QAAQ,KAAK,CAAC,8BAA8B;QAC5C,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD;QACvB;IACF;AACF;AAGe,UAAU;IACvB,MAAM,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EACb,qIAAA,CAAA,iBAAc,CAAC,IAAI,EACnB;AAEJ","debugId":null}},
    {"offset": {"line": 698, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/modules/sendMessage/saga.ts"],"sourcesContent":["'use client';\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// src/store/modules/session/saga.ts\nimport { ApiService } from '@/services/apiSercice';\nimport { RootState } from '@/store';\nimport { call, put, select, takeLatest } from 'redux-saga/effects';\n\nimport { CoreMessageResponse } from '@/interface/chats';\nimport { chatSelectedMessageAdd } from '../chatSelected/slice';\nimport {\n  sendMessageFailure,\n  sendMessageRequest,\n  sendMessageSuccess\n} from './slice';\n\nconst handlesendMessage = function* ({ payload }: any): any {\n  const token = yield select((state: RootState) => state.session.token);\n\n  try {\n    const api = new ApiService(token);\n    const response = yield call([api, api.sendMessage], payload.chatId, payload.message);\n    yield put(chatSelectedMessageAdd({ message: response as CoreMessageResponse }));\n    yield put(sendMessageSuccess({\n      response: response,\n      valid: true,\n    }));\n    return;\n  } catch (err: any) {\n    yield put(sendMessageFailure());\n    return;\n  }\n}\n\n\nexport default function* sessionSaga() {\n  yield takeLatest<any>(\n    sendMessageRequest.type,\n    handlesendMessage\n  );\n}\n"],"names":[],"mappings":";;;AAEA,oDAAoD,GACpD,qDAAqD,GAErD,oCAAoC;AACpC;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAZA;;;;;AAkBA,MAAM,oBAAoB,UAAW,EAAE,OAAO,EAAO;IACnD,MAAM,QAAQ,MAAM,CAAA,GAAA,oMAAA,CAAA,SAAM,AAAD,EAAE,CAAC,QAAqB,MAAM,OAAO,CAAC,KAAK;IAEpE,IAAI;QACF,MAAM,MAAM,IAAI,gIAAA,CAAA,aAAU,CAAC;QAC3B,MAAM,WAAW,MAAM,CAAA,GAAA,iMAAA,CAAA,OAAI,AAAD,EAAE;YAAC;YAAK,IAAI,WAAW;SAAC,EAAE,QAAQ,MAAM,EAAE,QAAQ,OAAO;QACnF,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,0IAAA,CAAA,yBAAsB,AAAD,EAAE;YAAE,SAAS;QAAgC;QAC5E,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,yIAAA,CAAA,qBAAkB,AAAD,EAAE;YAC3B,UAAU;YACV,OAAO;QACT;QACA;IACF,EAAE,OAAO,KAAU;QACjB,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,yIAAA,CAAA,qBAAkB,AAAD;QAC3B;IACF;AACF;AAGe,UAAU;IACvB,MAAM,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EACb,yIAAA,CAAA,qBAAkB,CAAC,IAAI,EACvB;AAEJ","debugId":null}},
    {"offset": {"line": 748, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/modules/session/saga.ts"],"sourcesContent":["'use client';\n\n/* eslint-disable @typescript-eslint/no-unused-vars */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n// src/store/modules/session/saga.ts\nimport { ApiService } from '@/services/apiSercice';\nimport { call, put, takeLatest } from 'redux-saga/effects';\nimport { profileRequest } from '../profile/slice';\nimport {\n  validateSessionFailure,\n  validateSessionRequest,\n  validateSessionSuccess\n} from './slice';\n\nconst handleValidateSession = function* ({ token }: { token: string }): any {\n  const mockUserId = \"67cfa19fbca330b02331873d\";\n  try {\n    const api = new ApiService(token);\n\n    if (!token) {\n      const response = yield call([api, api.startSession], mockUserId);\n      api.setToken(response.token);\n\n      // Revalida a sessão após iniciar      \n      const recheck = yield call([api, api.validateSession]);\n      if (!recheck.valid) {\n        return yield put(validateSessionFailure());\n      }\n\n      yield put(profileRequest({ token: response.token }));\n      yield put(validateSessionSuccess({\n        userId: mockUserId,\n        token: response.token,\n        valid: true,\n      }));\n      return;\n    }\n\n    // Revalida a sessão após iniciar      \n    const recheck = yield call([api, api.validateSession]);\n    if (!recheck.valid) {\n      return yield put(validateSessionFailure());\n    }\n\n    yield put(profileRequest({ token: token }));\n    yield put(validateSessionSuccess({\n      userId: mockUserId,\n      valid: true,\n    }));\n    return;\n\n  } catch (err: any) {\n    yield put(validateSessionFailure());\n    return false;\n  }\n}\n\nexport default function* sessionSaga() {\n  yield takeLatest<any>(\n    validateSessionRequest.type,\n    handleValidateSession\n  );\n}\n"],"names":[],"mappings":";;;AAEA,oDAAoD,GACpD,qDAAqD,GAErD,oCAAoC;AACpC;AACA;AAAA;AAAA;AAAA;AACA;AACA;AATA;;;;;AAeA,MAAM,wBAAwB,UAAW,EAAE,KAAK,EAAqB;IACnE,MAAM,aAAa;IACnB,IAAI;QACF,MAAM,MAAM,IAAI,gIAAA,CAAA,aAAU,CAAC;QAE3B,IAAI,CAAC,OAAO;YACV,MAAM,WAAW,MAAM,CAAA,GAAA,iMAAA,CAAA,OAAI,AAAD,EAAE;gBAAC;gBAAK,IAAI,YAAY;aAAC,EAAE;YACrD,IAAI,QAAQ,CAAC,SAAS,KAAK;YAE3B,uCAAuC;YACvC,MAAM,UAAU,MAAM,CAAA,GAAA,iMAAA,CAAA,OAAI,AAAD,EAAE;gBAAC;gBAAK,IAAI,eAAe;aAAC;YACrD,IAAI,CAAC,QAAQ,KAAK,EAAE;gBAClB,OAAO,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,yBAAsB,AAAD;YACxC;YAEA,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD,EAAE;gBAAE,OAAO,SAAS,KAAK;YAAC;YACjD,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,yBAAsB,AAAD,EAAE;gBAC/B,QAAQ;gBACR,OAAO,SAAS,KAAK;gBACrB,OAAO;YACT;YACA;QACF;QAEA,uCAAuC;QACvC,MAAM,UAAU,MAAM,CAAA,GAAA,iMAAA,CAAA,OAAI,AAAD,EAAE;YAAC;YAAK,IAAI,eAAe;SAAC;QACrD,IAAI,CAAC,QAAQ,KAAK,EAAE;YAClB,OAAO,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,yBAAsB,AAAD;QACxC;QAEA,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,iBAAc,AAAD,EAAE;YAAE,OAAO;QAAM;QACxC,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,yBAAsB,AAAD,EAAE;YAC/B,QAAQ;YACR,OAAO;QACT;QACA;IAEF,EAAE,OAAO,KAAU;QACjB,MAAM,CAAA,GAAA,gMAAA,CAAA,MAAG,AAAD,EAAE,CAAA,GAAA,qIAAA,CAAA,yBAAsB,AAAD;QAC/B,OAAO;IACT;AACF;AAEe,UAAU;IACvB,MAAM,CAAA,GAAA,qMAAA,CAAA,aAAU,AAAD,EACb,qIAAA,CAAA,yBAAsB,CAAC,IAAI,EAC3B;AAEJ","debugId":null}},
    {"offset": {"line": 825, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/store/rootSaga.ts"],"sourcesContent":["// src/store/rootSaga.ts\nimport { all } from 'redux-saga/effects';\n\nimport profileSaga from '@/modules/profile/saga';\nimport sendMessageSaga from '@/modules/sendMessage/saga';\nimport sessionSaga from '@/modules/session/saga';\n\nexport default function* rootSaga() {\n  yield all([sessionSaga(), profileSaga(), sendMessageSaga()]);\n}\n"],"names":[],"mappings":"AAAA,wBAAwB;;;;AACxB;AAAA;AAEA;AACA;AACA;;;;;AAEe,UAAU;IACvB,MAAM,CAAA,GAAA,iMAAA,CAAA,MAAG,AAAD,EAAE;QAAC,CAAA,GAAA,oIAAA,CAAA,UAAW,AAAD;QAAK,CAAA,GAAA,oIAAA,CAAA,UAAW,AAAD;QAAK,CAAA,GAAA,wIAAA,CAAA,UAAe,AAAD;KAAI;AAC7D","debugId":null}},
    {"offset": {"line": 854, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/store/index.ts"],"sourcesContent":["// src/store/index.ts\nimport { configureStore } from '@reduxjs/toolkit';\nimport createSagaMiddleware from 'redux-saga';\nimport { rootReducer } from './rootReducer';\nimport rootSaga from './rootSaga';\n\nconst sagaMiddleware = createSagaMiddleware();\n\nexport const store = configureStore({\n  reducer: rootReducer,\n  middleware: (getDefaultMiddleware) =>\n    getDefaultMiddleware({ thunk: false }).concat(sagaMiddleware),\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nsagaMiddleware.run(rootSaga);\n\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppDispatch = typeof store.dispatch;\n"],"names":[],"mappings":"AAAA,qBAAqB;;;;AAYT;AAXZ;AACA;AAAA;AACA;AACA;;;;;AAEA,MAAM,iBAAiB,CAAA,GAAA,wMAAA,CAAA,UAAoB,AAAD;AAEnC,MAAM,QAAQ,CAAA,GAAA,8LAAA,CAAA,iBAAc,AAAD,EAAE;IAClC,SAAS,8HAAA,CAAA,cAAW;IACpB,YAAY,CAAC,uBACX,qBAAqB;YAAE,OAAO;QAAM,GAAG,MAAM,CAAC;IAChD,UAAU,oDAAyB;AACrC;AAEA,eAAe,GAAG,CAAC,2HAAA,CAAA,UAAQ","debugId":null}},
    {"offset": {"line": 886, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/app/providers.tsx"],"sourcesContent":["'use client';\n\nimport { ThemeProvider } from '@/themes/themeContext';\nimport { Provider } from 'react-redux';\nimport { store } from '../store';\n\nexport function Providers({ children }: { children: React.ReactNode }) {\n  return (\n    <ThemeProvider>\n      <Provider store={store}>\n        {children}\n      </Provider>\n    </ThemeProvider>\n  );\n} "],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAJA;;;;;AAMO,SAAS,UAAU,EAAE,QAAQ,EAAiC;IACnE,qBACE,6LAAC,iIAAA,CAAA,gBAAa;kBACZ,cAAA,6LAAC,4JAAA,CAAA,WAAQ;YAAC,OAAO,wHAAA,CAAA,QAAK;sBACnB;;;;;;;;;;;AAIT;KARgB","debugId":null}},
    {"offset": {"line": 926, "column": 0}, "map": {"version":3,"sources":["file:///Users/elioglima/projects/neocoode/sdk-cortex/plugins/luma/src/components/toast.tsx"],"sourcesContent":["'use client';\nimport { useEffect } from 'react';\nimport { toast } from 'react-toastify';\n\nimport { hideToast } from '@/modules/toast/slice';\nimport { RootState } from '@/store';\nimport { useDispatch, useSelector } from 'react-redux';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst Toast = () => {\n  const dispatch = useDispatch();\n  const { message, type, isVisible } = useSelector((state: RootState) => state.toast);\n\n  useEffect(() => {\n    if (isVisible) {\n      const toastId = (() => {\n        switch (type) {\n          case 'success':\n            return toast.success(message);\n          case 'error':\n            return toast.error(message);\n          case 'info':\n            return toast.info(message);\n          case 'warning':\n            return toast.warning(message);\n          default:\n            return toast(message);\n        }\n      })();\n\n      const timer = setTimeout(() => {\n        toast.dismiss(toastId);\n        dispatch(hideToast());\n      }, 15000);\n\n      return () => clearTimeout(timer);\n    }\n  }, [isVisible, message, type, dispatch]);\n\n  return null;\n};\n\nexport default Toast;\n"],"names":[],"mappings":";;;AACA;AACA;AAEA;AAEA;;AANA;;;;;;AASA,MAAM,QAAQ;;IACZ,MAAM,WAAW,CAAA,GAAA,4JAAA,CAAA,cAAW,AAAD;IAC3B,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,CAAA,GAAA,4JAAA,CAAA,cAAW,AAAD;6BAAE,CAAC,QAAqB,MAAM,KAAK;;IAElF,CAAA,GAAA,6JAAA,CAAA,YAAS,AAAD;2BAAE;YACR,IAAI,WAAW;gBACb,MAAM,UAAU;+CAAC;wBACf,OAAQ;4BACN,KAAK;gCACH,OAAO,sJAAA,CAAA,QAAK,CAAC,OAAO,CAAC;4BACvB,KAAK;gCACH,OAAO,sJAAA,CAAA,QAAK,CAAC,KAAK,CAAC;4BACrB,KAAK;gCACH,OAAO,sJAAA,CAAA,QAAK,CAAC,IAAI,CAAC;4BACpB,KAAK;gCACH,OAAO,sJAAA,CAAA,QAAK,CAAC,OAAO,CAAC;4BACvB;gCACE,OAAO,CAAA,GAAA,sJAAA,CAAA,QAAK,AAAD,EAAE;wBACjB;oBACF;iBAAC;gBAED,MAAM,QAAQ;6CAAW;wBACvB,sJAAA,CAAA,QAAK,CAAC,OAAO,CAAC;wBACd,SAAS,CAAA,GAAA,mIAAA,CAAA,YAAS,AAAD;oBACnB;4CAAG;gBAEH;uCAAO,IAAM,aAAa;;YAC5B;QACF;0BAAG;QAAC;QAAW;QAAS;QAAM;KAAS;IAEvC,OAAO;AACT;GA/BM;;QACa,4JAAA,CAAA,cAAW;QACS,4JAAA,CAAA,cAAW;;;KAF5C;uCAiCS","debugId":null}}]
}